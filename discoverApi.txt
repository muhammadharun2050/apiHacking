                        scanning
                        ___________
    {If the API is for select customers or internal use, you’ll have to rely 
    on other clues: naming conventions, HTTP response header information 
    such as Content-Type: application/json, HTTP responses containing JSON/
    XML, and information about the JavaScript source files that power the 
    application.}
                            Google Hacking Query
inurl:"/wp-json/wp/v2/users"
intitle:"index.of" intext:"api.txt"
nurl:"/includes/api/" intext:"index of /"
ext:php inurl:"api.php?action="
https://www.programmableweb.com/    //this give me api information
        https://rapidapi.com and        //this give me api information
        https://apis.guru/browse-apis    //this give me api information

# Shodan Query Parameters //first go shodan website then search below this Query
        hostname:"targetname.com"
         "example.com"  "content-type: application/json"
         "example.com" "content-type: application/xml"
         "example.com" "200 OK"
         "example.com" "wp-json"

#OWASP Amass is a command line tool that can 
map a target’s external network by collecting OSINT from over 55 different sources. Command below

            amass enum -passive -d twitter.com |grep api   //for api findout
            amass intel -addr <target IP addresses>  //itel command use find ssl certificate
            amass intel -d <target domain> –whois  //find domain reserve lookup
            amass enum -passive -d <target domain>
            amass enum -acative -d <target domain>
            amass enum -active -brute -w /usr/share/wordlists/API_superlist -d <target domain> -dir (directory)
GitHub for OSINT could reveal your target’s API capabilities, documentation, and secrets, such as admin-level API keys, passwords, and tokens, 
which could be useful during an attack.

#see source code on github ypur terget . try find admin naame, api key, README.md File etc.
## Try searching for terms using the common API path terms, like “api,” “v1,” “v2,” “swagger,” “rest,” and “dev.”
# there  you find many api list (https://wordlists.assetnote.io/) brute for wordlists
# Brute-Forcing URIs with Gobuster
                gobuster dir -u http://192.168.195.132:8000 -w /home/hapihacker/api/wordlists/common_apis_160
#Discovering API endpoint Content with Kiterunner
        kiterunner (kali tools)
        kr scan http://192.168.195.132:8090 -w ~/api/wordlists/data/kiterunner/routes-large.kite
        kr brute <target> -w ~/api/wordlists/data/automated/nameofwordlist.txt
        download kr api wordlists their site

                                        # blackbox testing 
nmap -sc -sC -oA/oX/oN ip


_________________________________________________________________________________________________

                                        Api end point analysis

#Finding Information in Documentation
                https://github.com/hAPI-hacker/Hacking-APIs // here a wordlsit find api documentation
                https://example.com/docs
                https://example.com/api/docs
                https://docs.example.com7
                https://dev.example.com/docs
                https://developer.example.com/docs
                https://api.example.com/docs
                https://example.com/developers/documentation
        still if you can not find api documentation use those technique
        1.google dork
        2. https://web.archive.org/  //use web archive
        3.try social enginirerring
example of api look like :    -> : or {} [] <> ।।

                /user/:id
                /user/{id}
                /user/2727
                /account/:username
                /account/{username}
                /account/scuttleph1sh
                /api/v1/user?find=[name] 
                “blue” || “green” || “red”

_________________________________________________________________________________________________
                                        TACKING API AUTHENTICATION
This chapter will guide you through classic authentication attacks like brute-force attacks and passwordspraying and then we’ll cover API-specific token attacks, such as token forgery and JWT attacks. 
 
# for bruteforce attack use most usefull usr and passwd below this list
                        https://github.com/sc0tfree/mentalist
                        https://github.com/Mebus/cupp
# bruteforcing tools -> burpsuite and wfuzz
                wfuzz -d '{"email":"a@email.com","password":"FUZZ"}' --hc 405 -H 'Content-Type: application/json' -z file,/home/hapihacker/rockyou.txt http://192.168.195.130:8888/api/v2/auth
# best wordlists for api end point
                 https://github.com/hAPI-hacker/Hacking-APIs
# use jwt    //jwt decode kwt token , example-->
                        jwt (token)
                        jwt_tool -t http://target-site.com/ -rc "Header: JWT_Token" -M p
# api fuzzing //end point bruteforcing wordlists

                https://github.com/danielmiessler/SecLists
                https://github.com/fuzzdb-project/fuzzdb
                https://github.com/xmendez/wfuzz
                
                try every string (~'!@#$%^&*()-_+)
# deep fuzzing with wfuzz
                 -> wfuzz -z file,/home/hapihacker/big-list-of-naughty-strings.txt
                 ->wfuzz -z file,/home/hapihacker/big-list-of-naughty-strings.txt -H "Content-Type: application/json" -H "x-access-token: [...]"

                 -> wfuzz -z file,/home/hapihacker/big-list-of-naughty-strings.txt -H "Content-Type: application
                 json" -H "x-access-token: [...]" -p 127.0.0.1:8080:HTTP --hc 400 -X PU

                 -> wfuzz -z file,/home/hapihacker/big-list-of-naughty-strings.txt -H "Content-Type: application/
                        json" -H "x-access-token: [...]" --hc 400 -X PUT -d "{
                        \"user\": \"FUZZ\",
                        \"pass\": \"FUZZ\",
                        \"id\": \"FUZZ\",
                        \"name\": \"FUZZ\",
                        \"is_admin\": \"FUZZ\",
                        \"account_balance\": \"FUZZ\"
                        }" -u http://192.168.195.132:8090/api/user/edit_inf
note: page-250 //most important
                        
                        *Exploit section*
#A-B Testing for BOLA:
                 >Create resources as UserA.
                 >Swap out your UserA token for another user’s token.
                 >Using UserB’s token, make the request for UserA’s resources.
#Side-Channel BOLA/Discloser
                
